"""Script generated by ansys-mapdl-core version 0.58.9"""
# Created by Basil J. Paudel            5/13/2021
# This macro will export the nodal coordinates and the deformation results
# to a CSV file

# Imports
import os
from array import *

#from ansys.mapdl.core import launch_mapdl
from ansys.mapdl import reader as Reader
#from ansys.dpf.core import Model


def find_files(filename, search_path):
   result = []

# Wlaking top-down from the root
   for root, dir, files in os.walk(search_path):
      if filename in files:
         result.append(os.path.join(root, filename))
   return result
# End def

# Filter for exporting solutions
#   Need to adjust criterio accordingly
def can_reject(tStep, lastTStep):
    if(lastTStep<-1):
        lastTStep=-1
    newTStep =tStep//250       
    if (tStep <800/5*60):
        if(lastTStep==newTStep):
            return True,lastTStep
        else:
            lastTStep=newTStep
            return False,lastTStep
    else:
        return False,newTStep
# End function definition


# Define variables and constants
workdir = 'E:\\Basil\\DefComp\\'
path = "D:\\Basil\\WorkBench_Validation\\CD1\\Validation_CD1_Mar12_files\\dp0\\SYS\\MECH\\"

# INPUT
fname = "file.rst"
fullnameInput = path+fname
# path = os.getcwd()
workdir = path
print(path)

# OUTPUT
outputFile="Result_T"
outputDir = workdir + "Results\\"
try:
    if (os.path.exists(outputDir) == False):
        os.mkdir(outputDir)
except OSError as error:
    print('Error Creating folder')
    
# mapdl = launch_mapdl("True", loglevel="WARNING")
# Sample result file
rstfile = fullnameInput

# Create result object by loading the result file
# Working with result after simulation
result = Reader.read_binary(rstfile)
rsetMax=result.nsets-1

# Get nodal displacements
nnum,ndisp = result.nodal_displacement(rsetMax)

# Plot nodal solution
# result.plot_nodal_solution(rsetMax,background='w',show_edges=True,show_displacement=True)

# Get nodes original position
nodes = result.mesh.nodes

nodeCnt = len(nodes)
newPos = nodes  # Store original position
lastTStep=-1

# Now Iterate over time step
rsets=range(0,rsetMax+1)
for rset in rsets:      
    # Get corresponding time info
    tStep = result.solution_info(rset)['timfrq']
    
    # Don't export too many solutions in early stage

    cr,lastTStep = can_reject(tStep,lastTStep)
    if(cr==True):
        print("--Reject Load Set :%5i, tStep: %10.1f" % (rset, tStep))
        continue                # Reject exporting this TimeStep
    else:
        print("++Accept Load Set :%5i, tStep: %10.1f" % (rset, tStep))
        
    tStepStr = "%08.1f" % (tStep)
    
    # Get nodal solutions, along with nodal numbers
    nodeNum, nodeDisp = result.nodal_displacement(rset)   # first set
                                               
    newTable = []
    dofs=range(0,3)
    for j in nodeNum:
        for i in dofs:
            newPos[j-1,i]=nodes[j-1,i]+nodeDisp[j-1,i]
        newNode=[j,newPos[j-1,0],newPos[j-1,1],newPos[j-1,2]]
        newTable.insert(j-1, newNode)
        
    # Using info https://www.w3schools.com/python/python_file_write.asp 
    fullname=outputDir+outputFile+"_"+ tStepStr +".csv"
    f=open(fullname,"w")  
    
    print("%s %68s" % ('!',"Nodal Information Dump"),file=f)
    print("%s %58s%10i" % ('!',"Total Nodes =", nodeCnt),file=f)
    print("%s%9s%20s%20s%20s" % ('!',"Node","X","Y","Z"),file=f)
    print("nblock,3,,%i" % (nodeCnt),file=f)
    print("(1i9,3e20.9e3)",file=f)
    
    for j in nodeNum:
        print("%9i%20.9E%20.9E%20.9E" % (j,newPos[j-1,0],newPos[j-1,1],newPos[j-1,2]),file=f)
        
    print("-1",file=f)
    print("! ====================================================================",file=f)
    f.close()



    


